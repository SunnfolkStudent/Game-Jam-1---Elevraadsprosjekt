//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Sprites/æøå.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Æøå: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Æøå()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""æøå"",
    ""maps"": [
        {
            ""name"": ""Hjelp"",
            ""id"": ""6c009731-4f68-4c10-9f89-56e090de5a97"",
            ""actions"": [
                {
                    ""name"": ""Æ"",
                    ""type"": ""Button"",
                    ""id"": ""c46d3446-8fd4-43b5-935b-9ddd3aeddb57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ø"",
                    ""type"": ""Button"",
                    ""id"": ""1b07acae-7e62-4bac-a7ae-b9984da3985a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Å"",
                    ""type"": ""Button"",
                    ""id"": ""bcbeb865-9e11-4c03-918d-42ddd1d4c4a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c439bc2f-f17d-485a-9b0d-0223beeb820c"",
                    ""path"": ""<Keyboard>/#(Æ)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""æøå"",
                    ""action"": ""Æ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16841a13-dc57-4f99-b9c7-25d48cd76c91"",
                    ""path"": ""<Keyboard>/#(Ø)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""æøå"",
                    ""action"": ""Ø"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""618a1313-6abc-45f6-9975-fc8d60c85679"",
                    ""path"": ""<Keyboard>/#(Å)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""æøå"",
                    ""action"": ""Å"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""æøå"",
            ""bindingGroup"": ""æøå"",
            ""devices"": []
        }
    ]
}");
        // Hjelp
        m_Hjelp = asset.FindActionMap("Hjelp", throwIfNotFound: true);
        m_Hjelp_Æ = m_Hjelp.FindAction("Æ", throwIfNotFound: true);
        m_Hjelp_Ø = m_Hjelp.FindAction("Ø", throwIfNotFound: true);
        m_Hjelp_Å = m_Hjelp.FindAction("Å", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hjelp
    private readonly InputActionMap m_Hjelp;
    private List<IHjelpActions> m_HjelpActionsCallbackInterfaces = new List<IHjelpActions>();
    private readonly InputAction m_Hjelp_Æ;
    private readonly InputAction m_Hjelp_Ø;
    private readonly InputAction m_Hjelp_Å;
    public struct HjelpActions
    {
        private @Æøå m_Wrapper;
        public HjelpActions(@Æøå wrapper) { m_Wrapper = wrapper; }
        public InputAction @Æ => m_Wrapper.m_Hjelp_Æ;
        public InputAction @Ø => m_Wrapper.m_Hjelp_Ø;
        public InputAction @Å => m_Wrapper.m_Hjelp_Å;
        public InputActionMap Get() { return m_Wrapper.m_Hjelp; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HjelpActions set) { return set.Get(); }
        public void AddCallbacks(IHjelpActions instance)
        {
            if (instance == null || m_Wrapper.m_HjelpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HjelpActionsCallbackInterfaces.Add(instance);
            @Æ.started += instance.OnÆ;
            @Æ.performed += instance.OnÆ;
            @Æ.canceled += instance.OnÆ;
            @Ø.started += instance.OnØ;
            @Ø.performed += instance.OnØ;
            @Ø.canceled += instance.OnØ;
            @Å.started += instance.OnÅ;
            @Å.performed += instance.OnÅ;
            @Å.canceled += instance.OnÅ;
        }

        private void UnregisterCallbacks(IHjelpActions instance)
        {
            @Æ.started -= instance.OnÆ;
            @Æ.performed -= instance.OnÆ;
            @Æ.canceled -= instance.OnÆ;
            @Ø.started -= instance.OnØ;
            @Ø.performed -= instance.OnØ;
            @Ø.canceled -= instance.OnØ;
            @Å.started -= instance.OnÅ;
            @Å.performed -= instance.OnÅ;
            @Å.canceled -= instance.OnÅ;
        }

        public void RemoveCallbacks(IHjelpActions instance)
        {
            if (m_Wrapper.m_HjelpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHjelpActions instance)
        {
            foreach (var item in m_Wrapper.m_HjelpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HjelpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HjelpActions @Hjelp => new HjelpActions(this);
    private int m_æøåSchemeIndex = -1;
    public InputControlScheme æøåScheme
    {
        get
        {
            if (m_æøåSchemeIndex == -1) m_æøåSchemeIndex = asset.FindControlSchemeIndex("æøå");
            return asset.controlSchemes[m_æøåSchemeIndex];
        }
    }
    public interface IHjelpActions
    {
        void OnÆ(InputAction.CallbackContext context);
        void OnØ(InputAction.CallbackContext context);
        void OnÅ(InputAction.CallbackContext context);
    }
}
